mpt <- function(num_items = 30L,
take_training = TRUE,
label = "MPT",
feedback = mpt.feedback.no_score(),
audio_dir = "http://media.gold-msi.org/test_materials/MPT/v1-1/audio",
training_dir = "http://media.gold-msi.org/test_materials/MPT/training",
next_item.criterion = "bOpt",
next_item.estimator = "BM",
next_item.prior_dist = "norm",
next_item.prior_par = c(0, 1),
final_ability.estimator = "WL",
constrain_answers = FALSE,
dict = mpt::mpt_dict) {
stopifnot(is.scalar.character(label), is.scalar.numeric(num_items),
is.scalar.logical(take_training),
is.scalar.character(audio_dir),
is.scalar.character(training_dir),
psychTestR::is.timeline(feedback) ||
is.list(feedback) ||
psychTestR::is.test_element(feedback) ||
is.null(feedback))
audio_dir <- gsub("/$", "", audio_dir)
training_dir <- gsub("/$", "", training_dir)
psychTestR::new_timeline({
c(
if (take_training) instructions(training_dir),
main_test(label = label, audio_dir = audio_dir, num_items = num_items,
next_item.criterion = next_item.criterion,
next_item.estimator = next_item.estimator,
next_item.prior_dist = next_item.prior_dist,
next_item.prior_par = next_item.prior_par,
final_ability.estimator = final_ability.estimator,
constrain_answers = constrain_answers),
feedback
)},
dict = dict)
}
mpt()
is.scalar <- function(x) {
identical(length(x), 1L)
}
mpt()
?utils.R
is.scalar.character <- function(x) {
is.character(x) && is.scalar(x)
}
is.scalar.numeric <- function(x) {
is.numeric(x) && is.scalar(x)
}
is.scalar.logical <- function(x) {
is.logical(x) && is.scalar(x)
}
is.scalar <- function(x) {
identical(length(x), 1L)
}
is.integerlike <- function(x) {
all(round(x) == x)
}
is.scalar.integerlike <- function(x) {
is.scalar(x) && is.integerlike(x)
}
mmpt()
mpt()
devtools::install_github('pmcharrison/mpt')
# library(devtools)
library(htmltools)
library(psychTestR)
library(shiny)
library(mpt)
mpt()
mpt(...)
?psychTestRCAT::cat.feedback.graph
mpt(feedback =  psychTestRCAT::cat.feedback.graph(test_label, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(mpt, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(mdt, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(mpt, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(MPT, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(test_label=test_label, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
?psychTestRCAT
?psychTestRCAT::cat.feedback.graph
test_label=MPT
DK_full <- function(title = "Musikalitet og mental hastighed",
admin_password = "replace-with-secure-password",
researcher_email = NULL,
languages = mpt_languages(),
dict = mpt::mpt_dict,
...) {
elts <- c(
# experiment,
mpt(...),
elt_jspsych,
psychTestR::new_timeline(
dict = dict
),
elt_save_results_to_disk(complete = TRUE),
final_page("Det kører!")
)
psychTestR::make_test(
elts,
opt = psychTestR::test_options(title = title,
admin_password = admin_password,
researcher_email = researcher_email,
demo = FALSE,
languages = languages))
}
DK_full <- function(title = "Musikalitet og mental hastighed",
admin_password = "replace-with-secure-password",
researcher_email = NULL,
languages = mpt_languages(),
dict = mpt::mpt_dict,
...) {
elts <- c(
# experiment,
mpt(...),
elt_jspsych,
psychTestR::new_timeline(
dict = dict
),
elt_save_results_to_disk(complete = TRUE),
final_page("Det kører!")
)
psychTestR::make_test(
elts,
opt = psychTestR::test_options(title = title,
admin_password = admin_password,
researcher_email = researcher_email,
demo = FALSE,
languages = languages))
}
if (FALSE) {
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
}
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
shiny::runApp(".")
library(htmltools)
library(psychTestR)
library_dir <- "jspsych/jspsych-6.1.0"
custom_dir <- "jspsych/js"
head <- tags$head(
# jsPsych library files
includeScript(file.path(library_dir, "jspsych.js")),
includeScript(file.path(library_dir, "plugins/jspsych-html-keyboard-response.js")),
includeScript(file.path(library_dir, "plugins/jspsych-image-keyboard-response.js")),
includeScript(file.path(library_dir, "plugins/jspsych-audio-keyboard-response.js")),
# Custom files
includeScript(file.path(custom_dir, "welcome.js")),
includeScript(file.path(custom_dir,"sv_training.js")),
includeScript(file.path(custom_dir,"sv_real.js")),
includeScript(file.path(custom_dir,"cv_training.js")),
includeScript(file.path(custom_dir,"cv_real.js")),
includeScript(file.path(custom_dir,"sa_training.js")),
includeScript(file.path(custom_dir,"sa_real.js")),
includeCSS(file.path(library_dir, "css/jspsych.css")),
includeCSS("jspsych/css/RT_DK.css")
)
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
elt_jspsych <- page(
ui = ui,
label = "jspsych",
get_answer = function(input, ...) input$jspsych_results,
validate = function(answer, ...) nchar(answer) > 0L,
save_answer = TRUE
)
if (FALSE) {
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
}
make_test(
elts = list(
elt_jspsych,
elt_save_results_to_disk(complete = TRUE),
final_page("Du har nu klaret de tre reaktionstidstests!\\Your final scores are plotted below, with reference to the general population")
),
opt = demo_options(display = display_options(
full_screen = TRUE,
content_background_colour = "grey",
css = c(file.path(library_dir, "css/jspsych.css"),
"jspsych/css/RT_DK.css")
)))
elt_jspsych <- page(
ui = ui,
label = "jspsych",
get_answer = function(input, ...) input$jspsych_results,
validate = function(answer, ...) nchar(answer) > 0L,
save_answer = TRUE
)
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
shiny::runApp(test)
library(shiny); source('poly_online/app.R')
setwd("~/poly_online")
shiny::runApp(test)
shiny::runApp(test)
source('app.R')
source('app.R')
source('app.R')
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
setwd("~/poly_online")
# library(htmltools)
# library(psychTestR)
#
# jspsych_dir <- "jspsych-6.1.0"
#
# head <- tags$head(
#   includeScript(file.path(jspsych_dir, "jspsych.js")),
#   includeScript(file.path(jspsych_dir, "plugins/jspsych-html-keyboard-response.js"))
# )
#
# ui <- tags$div(
#   head,
#   includeScript("new-timeline.js"),
#   includeScript("run-jspsych.js"),
#   tags$div(id = "js_psych")
# )
#
# hello_world <- page(
#   ui = ui,
#   label = "hello_world",
#   get_answer = function(input, ...) input$jspsych_results,
#   validate = function(answer, ...) nchar(answer) > 0L,
#   save_answer = TRUE
# )
#
# elts <- list(
#   one_button_page("You are about to take the 'Hello world' test."),
#   one_button_page("When you see 'Hello world', press SPACE to continue."),
#   hello_world,
#   elt_save_results_to_disk(complete = TRUE),
#   final_page("You finished the test.")
# )
#
#  make_test(
#   elts = elts,
#   opt = demo_options(
#     display = display_options(
#       full_screen = TRUE,
#       css = file.path(jspsych_dir, "css/jspsych.css"))
#   ))
#
# # shiny::runApp(".")
# ####################################################
# # This script makes a psychTestR implementation of
# # various online polyrhythm studies
# # Date:20/3- 2020
# # Author: Cecilie Møller
# # Project group: Above + Jan Stupacher, Alexander Celma-Miralles, Peter Vuust
# ###################################################
#
library(htmltools)
library(psychTestR)
jspsych_dir <- "C:/Users/au213911/Documents/poly_online/jspsych-6.1.0"
head <- tags$head(
includeScript(file.path(jspsych_dir, "jspsych.js")),
includeScript(file.path(jspsych_dir, "plugins/jspsych-html-button-response.js")),
#includeScript(file.path(jspsych_dir, "plugins/jspsych_BPM/jspsych-audio-bpm-button-response.js")),
# includeScript(file.path(jspsych_dir, "plugins/jspsych-audio-keyboard-response.js")),
# includeScript(file.path(jspsych_dir, "plugins/jspsych-audio-button-response.js")),
)
ui <- tags$div(
head,
includeScript("new-timeline.js"),
includeScript("run-jspsych.js"),
tags$div(id = "js_psych")
)
hello_world <- page(
ui = ui,
label = "hello_world",
get_answer = function(input, ...) input$jspsych_results,
validate = function(answer, ...) nchar(answer) > 0L,
save_answer = TRUE
)
elts <- list(
one_button_page("HEJ THOR"),
one_button_page("Når der står 'TRYK NU', skal du trykke på mellemrumstasten."),
hello_world,
elt_save_results_to_disk(complete = TRUE),
final_page("GODT KLARET! DU ER EN STJERNE!!")
)
#########################
# RUN EXPERIMENT        #
#########################
make_test(
elts = elts,
opt = demo_options(
display = display_options(
full_screen = TRUE,
css = file.path(jspsych_dir, "css/jspsych.css"))
))
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
getwd
getwd()
getwd()
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
n29 <- readRDS("~/poly_online/output/results/id=29&p_id=2a5e389246b764d6eaabc5878ae5e08d55bc7b638cca448245c94b7767f9def9&save_id=1&pilot=false&complete=true.rds")
View(n29)
n29["results"]
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
Thor <- readRDS("~/poly_online/output/results/id=30&p_id=bf2a15c93c34ca423a7cadada4952a209f22a472bad52d3910d26c4e2267d017&save_id=1&pilot=false&complete=true.rds")
View(Thor)
View(Thor)
shiny::runApp(".")
shiny::runApp(".")
?one_button_page
shiny::runApp(".")
setwd("~/poly_online")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
?test_options
n43 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp1_results (1).zip/results/id=43&p_id=70a1c6b33f1104658fee7b10f244f6c5157ef75640ddb38f6ec4a11cdbeae622&save_id=1&pilot=false&complete=false.rds")
View(n43)
View(n43)
?test_options
View(n43)
View(n43)
n43 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp1_results (1).zip/results/id=43&p_id=dfb9004d5074bb81c9bc18504ee857d46651c3a85d67732a187b8a677678c710&save_id=2&pilot=false&complete=true.rds")
View(n43)
View(n43)
device[poly_ratio]
n43[device[poly_ratio]]
n43[results[device[poly_ratio]]]
n43[results[[poly_ratio]]
)
n43[results[[poly_ratio]]]
n43$results$poly_ratio
shiny::runApp('.')
shiny::runApp('.')
shiny::runApp(".")
?slider_page
?NAFC_page
NAFC_page(
label = "gender",
prompt = "Hvad er dit køn?",
choices = c("Kvinde","Mand","Andet / ønsker ikke at oplyse")
)
NAFC_page(
label = "difficulty",
prompt = "On a scale from 1-9 where 1 is extremely easy and 9 is extremely difficult, how did you find this task in general?",
choices = c("1","2","3","4","5","6","7","8","9")
)
NAFC_page(
label = "difficulty",
prompt = "On a scale from 1-9 where 1 is extremely easy and 9 is extremely difficult, how did you find this tapping task in general?",
choices = c("1","2","3","4","5","6","7","8","9")
)
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
headphones<-dropdown_page(
label = "headphones",
prompt = div(p("How do you play the sounds?"),
),
save_answer=TRUE,
choices = c("I will play sounds through", "on-ear headphones)","in-ear headphones","computer's speakers", "external speakers"),
alternative_choice = TRUE,
alternative_text = "Other - please state which?",
next_button_text = "Next",
max_width_pixels = 250
)
headphones<-dropdown_page(
label = "headphones",
prompt = div(p("How do you play the sounds?"),
),
save_answer=TRUE,
choices = c("I will play sounds through", "on-ear headphones)","in-ear headphones","computer's speakers", "external speakers"),
alternative_choice = TRUE,
alternative_text = "Other - please state which?",
next_button_text = "Next",
max_width_pixels = 250
)
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
