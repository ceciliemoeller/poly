"Oman	", "Pacific Islands	", "Pakistan	", "Panama	", "Papua New Guinea	", "Paraguay	", "Peru	", "Philippines	", "Poland	", "Portugal	",
"Puerto Rico	", "Qatar	", "Republic of Ireland ", "Reunion	", "Romania	", "Russian Federation	", "Rwanda	", "Saint Kitts and Nevis	", "Saint Lucia	", "Saint Vincent and the Grenadines	",
"Samoa	", "Sao Tome and Principe	", "Saudi Arabia	", "Senegal	", "Serbia	", "Seychelles	", "Sierra Leone	", "Singapore	", "Slovak Republic (Slovakia)	",
"Slovenia	", "Solomon Islands	", "Somalia	", "South Africa	", "South Sudan	", "Spain	", "Sri Lanka	", "Sudan	", "Suriname	", "Swaziland	", "Sweden	",
"Switzerland	", "Syria	", "Tajikistan	", "Tanzania", "Thailand	", "Netherlands	", "Timor Leste	", "Togo	", "Trinidad & Tobago	", "Tunisia	", "Turkey	",
"Turkmenistan	", "Turks & Caicos Islands	", "Uganda	", "UK ", "Ukraine	", "United Arab Emirates	", "United States of America (USA)	", "Uruguay	", "Uzbekistan	",
"Venezuela	", "Vietnam	", "Virgin Islands (UK)	", "Virgin Islands (US)	", "Yemen	", "Zambia	", "Zimbabwe", "I prefer not to tell you"
),
alternative_choice = TRUE,
alternative_text = "Other (please state which)",
next_button_text = "Next",
max_width_pixels = 250,
validate = function(answer, ...) {
if (answer=="Please select")
"From the dropdown menu please select the country you grew up in. If your country is not on the list, select 'other' at the bottom of the list and write the name of your country in the designated field."
else if (answer=="")
"In which country did you grow up? If you select 'other' at the bottom of the list then please write the name of your country in the designated field."
else TRUE
},
on_complete = function(answer, state, ...) {
set_global(key = "youth_country", value = answer, state = state)
}
),
# MOTHER TONGUE
language <- text_input_page(
label = "language",
width = "290px",
prompt = p(strong ("Which language(s) do you consider your mother tongue (the language(s) of the family you grew up in)?"),
p("If you are bilingual, please write the names of both languages beginning with the one with the strongest influence in your daily life.")),
save_answer=TRUE,
button_text = "Next"
)
)
# # MOTHER TONGUE
# language <- dropdown_page(
#   label = "language",
#   prompt = p(strong ("Which language(s) do you consider your mother tongue (the language(s) of the family you grew up in)?"),
#           p("If you are bilingual, please select the option 'Other or bilingual' and state the names of the languages beginning with the one with the strongest influence in your daily life.")),
#   save_answer=TRUE,
#   choices = c("Please select",  "Arabic", "Bengali", "Chinese", "Danish", "English", "Hindi", "Japanese", "Portuguese", "Punjabi", "Russian", "Spanish",
#                "I prefer not to tell you"
#   ),
#   alternative_choice = TRUE,
#   alternative_text = "Other or bilingual (please state which)",
#   next_button_text = "Next",
#   max_width_pixels = 290,
#   validate = function(answer, ...) {
#     if (answer=="Please select")
#       "Please select your mother tongue from the dropdown menu. If your mother tongue is not on the list, or if you are bilingual, select 'Other or bilingual' at the bottom of the list and write the name(s) of the language(s) in the designated field."
#     else if (answer=="")
#       "If you select 'Other or bilingual' at the bottom of the list, please write the name(s) of the language(s) in the designated field."
#     else TRUE
#   },
#   on_complete = function(answer, state, ...) {
#     set_global(key = "residence", value = answer, state = state)
#   }
# )
# )
# MUSICAL EXPERIENCE
music_exp <- c(
# ollen
ollen<-NAFC_page(
label = "ollen",
prompt = p(strong ("Which title best describes you?")),
choices = c("Nonmusician", "Music-loving nonmusician","Amateur musician","Serious amateur musician","Semiprofessional musician","Professional musician"),
on_complete = function(answer, state, ...) {
set_global(key = "ollen", value = answer, state = state)
if (answer == "Nonmusician"|answer =="Music-loving nonmusician") skip_n_pages(state,3)
}
),
#gold-msi item 06 from musical training subscale
MT_06<-NAFC_page(
label = "MT_06",
prompt = p(strong ("I can play the following number of musical instruments:")),
choices = c("0", "1","2","3","4","5","6 or more"),
),
# gold-msi instrument item
instrument <-dropdown_page(
label = "instrument",
prompt = p(strong ("The instrument I play best (including voice) is...")),
save_answer=TRUE,
choices = c("Please select","I don't play any instrument", "alto", "basoon", "cello", "clarinete", "double bass", "drums", "flute", "guitar", "harp", "horn",
"oboe", "piano", "saxophone", "trumpet", "tuba", "trombone",  "voice", "violin", "xylophone",  "I prefer not to tell you"),
alternative_choice = TRUE,
alternative_text = "Other (please state which)",
next_button_text = "Next",
max_width_pixels = 250,
validate = function(answer, ...) {
if (answer=="Please select")
"Please select the instrument you play best from the dropdown menu."
else if (answer=="")
"If your instrument is not on the list, please select 'Other' at the bottom of the list and write the name of the instrument you play best in the designated field."
else TRUE
},
on_complete = function(answer, state, ...) {
set_global(key = "instrument", value = answer, state = state)
}
),
# custom made question on instrument experience
years_instrument <- dropdown_page(
label = "years_instr",
prompt = p(strong("For how many years have you played a musical instrument (including voice)?")),
save_answer=TRUE,
choices = c("Please select", "I don't play any instrument", "Less than one year", "1",	"2",	"3",	"4",	"5",	"6",	"7",	"8",	"9",	"10",	"11",	"12",	"13",	"14",	"15",	"16",	"17",
"18",	"19",	"20",	"21",	"22",	"23",	"24",	"25",	"26",	"27",	"28",	"29",	"30",	"31",	"32",	"33","34",	"35",	"36",	"37",	"38",	"39",	"40",	"41",	"42",
"43",	"44",	"45",	"46",	"47",	"48",	"49",	"50",	"51",	"52",	"53",	"54",	"55",	"56",	"57",	"58",	"59",	"60",	"61",	"62",	"63",	"64","65",	"66",	"67",
"68",	"69",	"70",	"71",	"72",	"73",	"74",	"75",	"76",	"77",	"78",	"79",	"80 years or more", "I prefer not to tell you"),
next_button_text = "Next",
max_width_pixels = 250,
validate = function(answer, ...) {
if (answer=="Please select")
"Please provide your best estimate of the number of years you have played a musical instrument (click the small arrow on the right of the box to see the options). We ask because it matters for the analyses of the data you provide."
else TRUE
},
on_complete = function(answer, state, ...) {
set_global(key = "age", value = answer, state = state)
}
)
)
# onset_age <- dropdown_page(
#   label = "age",
#   prompt = p(strong("What age did you start to play an instrument?")),
#   save_answer=TRUE,
#   choices = c("Please select", "I don't play any instrument", "1",	"2",	"3",	"4",	"5",	"6",	"7",	"8",	"9",	"10",	"11",	"12",	"13",	"14",	"15",	"16",	"17",
#               "18",	"19",	"20",	"21",	"22",	"23",	"24",	"25",	"26",	"27",	"28",	"29",	"30",	"31",	"32",	"33","34",	"35",	"36",	"37",	"38",	"39",	"40",	"41",	"42",
#               "43",	"44",	"45",	"46",	"47",	"48",	"49",	"50",	"51",	"52",	"53",	"54",	"55",	"56",	"57",	"58",	"59",	"60",	"61",	"62",	"63",	"64","65",	"66",	"67",
#               "68",	"69",	"70",	"71",	"72",	"73",	"74",	"75",	"76",	"77",	"78",	"79",	"80 or above", "I prefer not to tell you"),
#   # alternative_choice = TRUE,
#   # alternative_text = "I prefer not to tell you",
#   next_button_text = "Next",
#   max_width_pixels = 250,
#   validate = function(answer, ...) {
#     if (answer=="Please select")
#       "Please state the age at which you started to play a musical instrument (click the small arrow on the right of the box to see the options). We ask because it matters for the analyses of the data you provide."
#     else TRUE
#   },
#   on_complete = function(answer, state, ...) {
#     set_global(key = "age", value = answer, state = state)
#   }
# )
# # GOLD-MSI MUSICAL TRAINING SUBSCALE ITEMS
#
# MT_01<-NAFC_page(
#   label = "MT_01",
#   prompt = p(strong ("I engaged in regular, daily practice of a musical instrument (including voice) for the following number of years:")),
#   choices = c("0", "1","2","3","4-5","6-9","10 or more"),
# )
# MT_02<-NAFC_page(
#   label = "MT_02",
#   prompt = p(strong ("At the peak of my interest, I practised my primary instrument for the following number of hours per day:")),
#   choices = c("0", "0.5", "1","1.5","2","3-4","5 or more"),
# )
#
# #REVERSE ITEM 03
# MT_03<-NAFC_page(
#   label = "MT_03",
#   prompt = p(strong ("I have never been complimented for my talents as a musical performer.")),
#   choices = c("Completely Disagree", "Strongly Disagree", "Disagree","Neither Agree nor Disagree","Agree","Strongly Agree","Completely Agree"),
# )
#
# MT_04<-NAFC_page(
#   label = "MT_04",
#   prompt = p(strong ("I have had formal training in music theory for the following number of years:")),
#   choices = c("0", "0.5", "1","2","3","4-6", "7 or more"),
# )
#
# MT_05<-NAFC_page(
#   label = "MT_05",
#   prompt = p(strong ("I have had formal training on a musical instrument (including voice) during my lifetime, for the following number of years:")),
#   choices = c("0","0.5", "1","2","3-5","6-9","10 or more"),
# )
#
# MT_06<-NAFC_page(
#   label = "MT_06",
#   prompt = p(strong ("I can play the following number of musical instruments:")),
#   choices = c("0", "1","2","3","4","5","6 or more"),
# )
#
# #REVERSE ITEM 07
# MT_07<-NAFC_page(
#   label = "MT_07",
#   prompt = p(strong ("I would not consider myself a musician.")),
#   choices = c("Completely Disagree", "Strongly Disagree", "Disagree","Neither Agree nor Disagree","Agree","Strongly Agree","Completely Agree"),
# )
#
# # CREATE LIST OF G_MSI ITEMS TO RANDOMISE
# g_msi_training <- join(
# MT_01,
# MT_02,
# MT_03,
# MT_04,
# MT_05,
# MT_06,
# MT_07
# )
# COMMENTS
duplets <- dropdown_page(
label = "duplets",
prompt = p(strong("Have you taken this exact same test before?")),
save_answer=TRUE,
choices = c("Please select", "No", "Yes, once before", "Yes, twice before",	"Yes, three times before",	"Yes, four times before",	"Yes, five times before",	"Yes, six or more times before"),
# alternative_choice = TRUE,
# alternative_text = "I prefer not to tell you",
next_button_text = "Next",
max_width_pixels = 250,
validate = function(answer, ...) {
if (answer=="Please select")
"Please let us know if you tried this exact same test before. We ask because it matters for the analyses of the data you provide. If you like, you can provide additional comments in the next and final question."
else TRUE
},
on_complete = function(answer, state, ...) {
set_global(key = "age", value = answer, state = state)
}
)
comments <- text_input_page(
label = "comments",
one_line = FALSE,
width = "400px",
prompt = div(
HTML("<br>"),
p(strong("Optional: Is there anything else you would like to tell us?")),
HTML("<br>"),
p("Here, you can provide comments about your experience of participating in this study, if you think it may be useful for the researchers to know."),
p("Please do not write any personal information such as full name, email address, phone number etc."),
p("You are also welcome to contact us by email on cecilie@clin.au.dk")
),
save_answer = T,
button_text = "Next"
)
thanks<-final_page(div(
HTML("<img src='img/au_logo.png'></img> <img src='img/mib_logo.png'></img>"),
div(
h3(strong("Thanks very much!")),
p("We hope you enjoyed taking part in this scientific experiment."),
p("The data you provided is very valuable to us."),
p("If you want to, you can challenge your friends and followers to try it out too. Just click the share buttons below."),
HTML("<br>"),
HTML('<iframe src="https://www.facebook.com/plugins/share_button.php?href=https%3A%2F%2Fmusicinthebrain.au.dk%2Fcontact%2Fcan-you-keep-the-beat%2F&layout=button&size=large&width=78&height=28&appId" width="78" height="28" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowTransparency="true" allow="encrypted-media"></iframe>'),
HTML('<a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="large" data-text="I just participated in this online scientific experiment on musical beat perception from Center for Music in the Brain, Aarhus University. Can you keep the beat? Try it out! " data-url="https://musicinthebrain.au.dk/contact/can-you-keep-the-beat/" data-via="musicbrainAU" data-lang="en" data-show-count="false">Tweet</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'),
p("............."),
HTML("<br>"),
p("Your data has been saved now and you can safely close the browser window.")
)
))
elts <- join(
intro,
elt_save_results_to_disk(complete = FALSE),
sound_check,
poly_ratio,
elt_save_results_to_disk(complete = FALSE), # anything that is saved here counts as completed
age,
gender,
elt_save_results_to_disk(complete = FALSE),
demographics,
elt_save_results_to_disk(complete = FALSE),
# randomise_at_run_time("item_order", g_msi_training),
music_exp,
elt_save_results_to_disk(complete = FALSE),
duplets,
elt_save_results_to_disk(complete = TRUE),
comments,
elt_save_results_to_disk(complete = TRUE),
thanks
)
make_test(
elts = elts,
opt = test_options(title="Poly pilot, June 19th, 2020",
admin_password="", # write a secret password here
enable_admin_panel=TRUE,
researcher_email="cecilie@clin.au.dk",
problems_info="Problems? Contact cecilie@clin.au.dk",
display = display_options(
full_screen = TRUE,
css = c(file.path(jspsych_dir, "css/jspsych.css"),"css/style.css")
)))
# shiny::runApp(".")
###########################################################################
# This script extracts data from the umbrella -polyrhythm study           #
#                                                                         #                                                                       #
#                                                                         #
# Date: May. 28th   2020                                                  #
# Author: Cecilie Møller                                                  #
# Project group: above + Jan Stupacher, Alexandre Celma-Miralles,         #
# Peter Vuust                                                             #
###########################################################################
# INITIALIZE
library(jsonlite)
library(dplyr)
library(ggplot2)
library(gglearn2)
# SET WORKING DIRECTORY
setwd("C:/Users/au213911/Documents/poly_online")
# LIST FILES IN WORKING DIRECTORY (ignoring folders and recursives)
files <- setdiff(list.files(paste0(getwd(),"/results"),include.dirs=F,all.files=F),list.dirs(paste0(getwd(),"/output/results"),full.names=F))
files <- files[grep(".rds$",files)]
# CREATE OUTPUT FILE
output <- data.frame(id=character(),
stringsAsFactors=F)
#
# # test <- data.frame(id=character(),
#                   stringsAsFactors=F)
for (i in 1:length(files)) {
results <- readRDS(paste0(getwd(),"/results/",files[i]))
output[i,"id"] <- results$session$p_id
output[i,"complete"] <- results$session$complete
output[i,"currentTime"] <- results$session$current_time
output[i,"startTime"] <- results$session$time_started
output[i,"device"] <- results$results$device
output[i,"browser"] <- results$results$browser
output[i,"headphones"] <- results$results$headphones
if ("age"%in%names(results$results)) {
output[i,"age"] <- results$results$age
output[i,"gender"] <- results$results$gender
}
if ("language"%in%names(results$results)) {
output[i,"residence"] <- results$results$residence
output[i,"youth_country"] <- results$results$youth_country
output[i,"language"] <- results$results$language
output[i,"ollen"] <- results$results$ollen
}
if ("years_instr"%in%names(results$results)) {
output[i,"MT_06"] <- results$results$MT_06
output[i,"instrument"] <- results$results$instrument
output[i,"years_instr"] <- results$results$years_instr
}
if ("duplets"%in%names(results$results)) {
output[i,"duplets"] <- results$results$duplets
}
if ("comments"%in%names(results$results)) {
output[i,"comments"] <- results$results$comments
}
if ("poly_ratio"%in%names(results$results)) {
# make js data into dataframe
jsdata<- fromJSON(results$results$poly_ratio)
#look in first row of the dataframe to see which condition (pitch/tempo/ratio) this participant was in and paste into output (a way to double check the code)
output[i,"soundcheck"]<-jsdata$stimulus[1]
# extract relevant rows, i.e. only those containing tapping data
tapping_all <- subset(jsdata, trial_type== "audio-bpm-button-response")
# save spontaneous taps in output
output[i,"spontaneous_taps"]<-tapping_all$rt[1]
#remove spontaneous taps (duplicate column name)
tapping <- subset(tapping_all, stimulus!= "sounds/spontaneous_tap_15s.mp3")
# and restructure
reshaped <- t(tapping)
# Extract stimulus names
conds<-reshaped['stimulus',]
# extract taps
taps<-reshaped['rt',]
# and paste the taps into the column in output which is named according to conds (stimulus name)
output[i,conds]<-taps
#
# # extract stimulus presentation order and ratings
#
#     tr_ind<-reshaped['trial_index',]
#     stim<-reshaped['stimulus',]
#     output[i,tr_ind]<-stim
#
#     rating<-subset(jsdata, trial_type=="html-slider-response")
#     t_rating <- t(rating)
#
#     tr_ind<-t_rating['trial_index',]
#     verdict<-t_rating['response',]
#     output[i,tr_ind]<-verdict
}
}
# MAKE FILES
output_p<- subset(output, soundcheck== "sounds/pitch/poly_pitch_marimba_loudness.mp3")
emptycols <- colSums(is.na(output_p)) == nrow(output_p)
output_p <- output_p[!emptycols]
output_t<- subset(output, soundcheck== "sounds/tempo/poly_tempo_loudness_check.mp3")
emptycols <- colSums(is.na(output_t)) == nrow(output_t)
output_t <- output_t[!emptycols]
output_r<- subset(output, soundcheck== "sounds/ratio/poly_ratio_loudness_check.mp3")
emptycols <- colSums(is.na(output_r)) == nrow(output_r)
output_r <- output_r[!emptycols]
write.csv(output_p, file = "./pitchtaps.csv")
write.csv(output_t, file = "./tempotaps.csv")
write.csv(output_r, file = "./ratiotaps.csv")
write.csv(output, file = "./ptrtaps.csv")
##################
# PLOT
##################
###
# run shiny app to create plots
# gglearn(dataset = output)
#
ggplot(output, aes(x = soundcheck, fill=complete)) +
geom_bar()
ggplot(output, aes(x = browser)) +
geom_bar()+
facet_wrap(~complete)
ggplot(output, aes(x = device)) +
geom_bar()+
facet_wrap(~complete)
###########################################################################
# This script extracts data from the umbrella -polyrhythm study           #
#                                                                         #                                                                       #
#                                                                         #
# Date: May. 28th   2020                                                  #
# Author: Cecilie Møller                                                  #
# Project group: above + Jan Stupacher, Alexandre Celma-Miralles,         #
# Peter Vuust                                                             #
###########################################################################
# INITIALIZE
library(jsonlite)
library(dplyr)
library(ggplot2)
library(gglearn2)
# SET WORKING DIRECTORY
setwd("C:/Users/au213911/Documents/poly_online")
# LIST FILES IN WORKING DIRECTORY (ignoring folders and recursives)
files <- setdiff(list.files(paste0(getwd(),"/results"),include.dirs=F,all.files=F),list.dirs(paste0(getwd(),"/output/results"),full.names=F))
files <- files[grep(".rds$",files)]
# CREATE OUTPUT FILE
output <- data.frame(id=character(),
stringsAsFactors=F)
#
# # test <- data.frame(id=character(),
#                   stringsAsFactors=F)
for (i in 1:length(files)) {
results <- readRDS(paste0(getwd(),"/results/",files[i]))
output[i,"id"] <- results$session$p_id
output[i,"complete"] <- results$session$complete
output[i,"currentTime"] <- results$session$current_time
output[i,"startTime"] <- results$session$time_started
output[i,"device"] <- results$results$device
output[i,"browser"] <- results$results$browser
output[i,"headphones"] <- results$results$headphones
if ("age"%in%names(results$results)) {
output[i,"age"] <- results$results$age
output[i,"gender"] <- results$results$gender
}
if ("language"%in%names(results$results)) {
output[i,"residence"] <- results$results$residence
output[i,"youth_country"] <- results$results$youth_country
output[i,"language"] <- results$results$language
output[i,"ollen"] <- results$results$ollen
}
if ("years_instr"%in%names(results$results)) {
output[i,"MT_06"] <- results$results$MT_06
output[i,"instrument"] <- results$results$instrument
output[i,"years_instr"] <- results$results$years_instr
}
if ("duplets"%in%names(results$results)) {
output[i,"duplets"] <- results$results$duplets
}
if ("comments"%in%names(results$results)) {
output[i,"comments"] <- results$results$comments
}
if ("poly_ratio"%in%names(results$results)) {
# make js data into dataframe
jsdata<- fromJSON(results$results$poly_ratio)
#look in first row of the dataframe to see which condition (pitch/tempo/ratio) this participant was in and paste into output (a way to double check the code)
output[i,"soundcheck"]<-jsdata$stimulus[1]
# extract relevant rows, i.e. only those containing tapping data
tapping_all <- subset(jsdata, trial_type== "audio-bpm-button-response")
# save spontaneous taps in output
output[i,"spontaneous_taps"]<-tapping_all$rt[1]
#remove spontaneous taps (duplicate column name)
tapping <- subset(tapping_all, stimulus!= "sounds/spontaneous_tap_15s.mp3")
# and restructure
reshaped <- t(tapping)
# Extract stimulus names
conds<-reshaped['stimulus',]
# extract taps
taps<-reshaped['rt',]
# and paste the taps into the column in output which is named according to conds (stimulus name)
output[i,conds]<-taps
#
# # extract stimulus presentation order and ratings
#
#     tr_ind<-reshaped['trial_index',]
#     stim<-reshaped['stimulus',]
#     output[i,tr_ind]<-stim
#
#     rating<-subset(jsdata, trial_type=="html-slider-response")
#     t_rating <- t(rating)
#
#     tr_ind<-t_rating['trial_index',]
#     verdict<-t_rating['response',]
#     output[i,tr_ind]<-verdict
}
}
# MAKE FILES
output_p<- subset(output, soundcheck== "sounds/pitch/poly_pitch_marimba_loudness.mp3")
emptycols <- colSums(is.na(output_p)) == nrow(output_p)
output_p <- output_p[!emptycols]
output_t<- subset(output, soundcheck== "sounds/tempo/poly_tempo_loudness_check.mp3")
emptycols <- colSums(is.na(output_t)) == nrow(output_t)
output_t <- output_t[!emptycols]
output_r<- subset(output, soundcheck== "sounds/ratio/poly_ratio_loudness_check.mp3")
emptycols <- colSums(is.na(output_r)) == nrow(output_r)
output_r <- output_r[!emptycols]
write.csv(output_p, file = "./pitchtaps.csv")
write.csv(output_t, file = "./tempotaps.csv")
write.csv(output_r, file = "./ratiotaps.csv")
write.csv(output, file = "./ptrtaps.csv")
##################
# PLOT
##################
###
# run shiny app to create plots
# gglearn(dataset = output)
#
ggplot(output, aes(x = soundcheck, fill=complete)) +
geom_bar()
ggplot(output, aes(x = browser)) +
geom_bar()+
facet_wrap(~complete)
ggplot(output, aes(x = device)) +
geom_bar()+
facet_wrap(~complete)
